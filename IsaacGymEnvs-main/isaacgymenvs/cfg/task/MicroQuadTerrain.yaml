# used to create the object
name: MicroQuadTerrain

physics_engine: 'physx'

env:
  numEnvs: ${resolve_default:64,${...num_envs}}
  
  numObservations: 176
  numActions: 8

  # numObservations: 188
  # numActions: 12

  envSpacing: 3  # [m]
  enableDebugVis: False

  terrain:
    terrainType: plane # none, plane, or trimesh
    staticFriction: 1.0  # [-]
    dynamicFriction: 1.0  # [-]
    restitution: 0.        # [-]
    # rough terrain only:
    curriculum: False
    maxInitMapLevel: 0
    mapLength: 6.
    mapWidth: 6.
    numLevels: 5
    numTerrains: 5
    # terrain types: [smooth slope, rough slope, stairs up, stairs down, discrete]
    terrainProportions: [0.1, 0.1, 0.35, 0.25, 0.2]
    # tri mesh only:
    slopeTreshold: 0.001

    maxHeight: 0.05
    minHeight: -0.05
    stepHeight: 0.01

  baseInitState:
    pos: [0.0, 0.0, 0.015] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]

    # pos: [0.0, 0.0, 0.62] # x,y,z [m]
    # rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    # vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    # vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]

  randomCommandVelocityRanges:
    # train
    linear_x: [-0.0, 1.] # min max [m/s]
    linear_y: [-0.0, 0.0]   # min max [m/s]
    yaw: [0.0, 0.0]    # min max [rad/s]

    # linear_x: [-1., 1.] # min max [m/s]
    # linear_y: [-1., 1.]   # min max [m/s]
    # yaw: [-3.14, 3.14]    # min max [rad/s]

  control:
    # PD Drive parameters:
    stiffness: 80.0  # [N*m/rad]
    damping: 2.0     # [N*m*s/rad]
    # action scale: target angle = actionScale * action + defaultAngle
    actionScale: 0.1
    # decimation: Number of control action updates @ sim DT per policy DT
    decimation: 4

  defaultJointAngles:  # = target angles when action = 0.0
    # LF_HAA: 0.03    # [rad]
    # LH_HAA: 0.03    # [rad]
    # RF_HAA: -0.03   # [rad]
    # RH_HAA: -0.03   # [rad]

    LF_HFE: 0.0     # [rad]
    LH_HFE: -0.0    # [rad]
    RF_HFE: 0.0     # [rad]
    RH_HFE: -0.0    # [rad]

    LF_KFE: -0.0    # [rad]
    LH_KFE: 0.0     # [rad]
    RF_KFE: -0.0    # [rad]
    RH_KFE: 0.0     # [rad]

  urdfAsset:
    file: "urdf/micro_bot/micro_quad/urdf/microquad_retracted.urdf"
    footName: Foot # SHANK if collapsing fixed joint, FOOT otherwise
    kneeName: THIGH_fixed
    # file: "urdf/anymal_c/urdf/anymal_minimal.urdf"
    # footName: SHANK
    # kneeName: THIGH
    collapseFixedJoints: True
    fixBaseLink: False
    defaultDofDriveMode: 1 # see GymDofDriveModeFlags (0 is none, 1 is pos tgt, 2 is vel tgt, 4 effort)

  learn:
    allowKneeContacts: false
    # rewards
    terminalReward: 0.0
    linearVelocityXYRewardScale: 1.0
    linearVelocityZRewardScale: -4.0
    angularVelocityXYRewardScale: -0.05
    angularVelocityZRewardScale: 0.5
    orientationRewardScale: -0. #-1.
    torqueRewardScale: -0.00002 # -0.000025
    jointAccRewardScale: -0.0005 # -0.0025
    baseHeightRewardScale: -0.0 #5
    feetAirTimeRewardScale:  1.0
    kneeCollisionRewardScale: -0.25 
    feetStumbleRewardScale: -0. #-2.0
    actionRateRewardScale: -0.01

    # normalization
    linearVelocityScale: 2.0
    angularVelocityScale: 0.25
    dofPositionScale: 1.0
    dofVelocityScale: 0.05
    heightMeasurementScale: 5.0

    # noise 
    addNoise: False
    noiseLevel: 0.0 # scales other values
    dofPositionNoise: 0.00
    dofVelocityNoise: 0.0
    linearVelocityNoise: 0.0
    angularVelocityNoise: 0.0
    gravityNoise: 0.00
    heightMeasurementNoise: 0.00

    #randomization
    randomizeFriction: True
    frictionRange: [1, 1.5]
    pushRobots: False
    pushInterval_s: 30

    # episode length in seconds
    episodeLength_s: 20

  viewer cam:
  viewer:
    refEnv: 0
    pos: [-0.05, -0.05, 0.05]  # [m]
    lookat: [0.01, 0.01, 0.005]  # [m]

  # viewer:
  #   refEnv: 0
  #   pos: [0, 0, 10]  # [m]
  #   lookat: [1., 1, 9]  # [m]

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.00001
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 2
    contact_offset: 0.000001
    rest_offset: 0.0
    bounce_threshold_velocity: 0.00001
    max_depenetration_velocity: 1.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  randomize: False
